# Copyright (c) 2023 Oracle and/or its affiliates.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

#--------------------------------------------------------------------------------------------------------------------------------------
# 1. Rename this file to <project-name>.auto.tfvars, where <project-name> is a name of your choice.
# 2. Provide values for "Tenancy Connectivity Variables".
# 3. Replace <REPLACE-BY-*> placeholders with appropriate values.
#--------------------------------------------------------------------------------------------------------------------------------------

#---------------------------------------
# Tenancy Connectivity Variables
#---------------------------------------

tenancy_ocid         = "<tenancy OCID>"            # Get this from OCI Console (after logging in, go to top-right-most menu item and click option "Tenancy: <your tenancy name>").
user_ocid            = "<user OCID>"               # Get this from OCI Console (after logging in, go to top-right-most menu item and click option "My profile").
fingerprint          = "<PEM key fingerprint>"     # The fingerprint can be gathered from your user account. In the "My profile page, click "API keys" on the menu in left hand side.
private_key_path     = "<path to the private key>" # This is the full path on your local system to the API signing private key.
private_key_password = ""                          # This is the password that protects the private key, if any.
region               = "<your tenancy region>"     # The region name.

#---------------------------------------
# Input variable
#---------------------------------------

instances_configuration = {
  default_compartment_id = "<REPLACE-BY-COMPARTMENT-OCID>"
  default_subnet_id = "<REPLACE-BY-SUBNET-OCID>"
  default_ssh_public_key_path = "~/.ssh/id_rsa.pub"
  instances = {
    INSTANCE-1 = {
      cis_level = "2"
      shape = "VM.Standard.E4.Flex"
      name  = "compute-only-instance-1"
      placement = {
        availability_domain = 1
        fault_domain = 1
      }
      boot_volume = {
        size = 120
        preserve_on_instance_deletion = false
      }
      encryption = {
        kms_key_id = "<REPLACE-BY-KEY-OCID>"
      }
      networking = {
        hostname  = "compute-only-instance-1"
        network_security_groups = ["<REPLACE-BY-NETWORK-SECURITY-GROUP_NAME>"]
      }
      marketplace_image = {
        name = "Oracle Linux 7 STIG" # Marketplace image name
      }
      cloud_agent = {
        disable_monitoring = false
        disable_management = false
        plugins = [
          {name = "Vulnerability Scanning", enabled = true},
          {name = "Oracle Java Management Service", enabled = true},
          {name = "Oracle Autonomous Linux", enabled = true},
          {name = "Management Agent", enabled = true},
          {name = "OS Management Service Agent", enabled = true}, # management plugin, impacted by disable_management attribute if not set.
          {name = "Custom Logs Monitoring", enabled = true}, # monitoring plugin, impacted by disable_monitoring attribute if not set.
          {name = "Compute RDMA GPU Monitoring", enabled = true},
          {name = "Compute Instance Run Command", enabled = true}, # management plugin, impacted by disable_management attribute if not set.
          {name = "Compute Instance Monitoring", enabled = true}, # monitoring plugin, impacted by disable_monitoring attribute if not set.
          {name = "Compute HPC RDMA Auto-Configuration", enabled = true},
          {name = "Compute HPC RDMA Authentication", enabled = true},
          {name = "Block Volume Management", enabled = true},
          {name = "Bastion", enabled = true}
        ]
      }
      cloud_init = {
        script_file = "./cloud-init.yaml"
## Comment the line above and uncomment the following five lines if you want provide the script inlined in heredoc style.        
#         heredoc_script = <<YAML
# #cloud-config
# runcmd:
#   - echo 'This instance was provisioned by Terraform.' >> /etc/motd
# YAML
      }        
    }
    INSTANCE-2 = { # Shielded instance, per platform_type and boot_volume.measured_boot settings. Based on platform image.
      shape = "VM.Standard.E4.Flex"
      name  = "compute-only-instance-2"
      platform_type = "AMD_VM"
      placement = {
        availability_domain = 1
        fault_domain = 2
      }
      boot_volume = {
        size = 120
        preserve_on_instance_deletion = true
        measured_boot = true # applicable when platform_type is set.
        backup_policy = "silver"
      }
      networking = {
        hostname  = "compute-only-instance-2"
        network_security_groups = ["<REPLACE-BY-NETWORK-SECURITY-GROUP_NAME>"]
      }
      encryption = {
        encrypt_in_transit_on_instance_create = true
      }
      platform_image = {
        name = "Oracle-Linux-8.10-2024.08.29-0"
      }
    }
    INSTANCE-3 = { # Confidential computing instance, per platform_type and encryption.encrypt_data_in_use settings. Based on platform image.
      shape = "VM.Standard.E4.Flex"
      name  = "compute-only-instance-3"
      platform_type = "AMD_VM"
      placement = {
        availability_domain = 1
        fault_domain = 3
      }
      boot_volume = {
        size = 120
        preserve_on_instance_deletion = true
        backup_policy = "gold"
      }
      networking = {
        hostname  = "compute-only-instance-3"
        network_security_groups = ["<REPLACE-BY-NETWORK-SECURITY-GROUP_NAME>"]
      }
      encryption = {
        encrypt_data_in_use = true # applicable when platform_type is set.
      }
      platform_image = {
        name = "Oracle-Linux-8.10-2024.08.29-0"
      }
    }
    INSTANCE-4 = { # Custom image
      shape = "VM.Standard.E4.Flex"
      name  = "compute-only-instance-4"
      placement = {
        availability_domain = 1
        fault_domain = 3
      }
      boot_volume = {
        size = 120
        preserve_on_instance_deletion = true
        backup_policy = "gold"
      }
      networking = {
        hostname  = "compute-only-instance-4"
        network_security_groups = ["<REPLACE-BY-NETWORK-SECURITY-GROUP_NAME>"]
      }
      custom_image = {
        name = "<REPLACE-BY-CUSTOM-IMAGE-NAME>"
        compartment_id = "<REPLACE-BY-CUSTOM-IMAGE-NAME-COMPARTMENT-OCID>"
      }
    }
  }
}

